@model IEnumerable<ScavengeRUs.Models.Entities.Hunt>

@{
    ViewData["Title"] = "Hunts";
}

<h1>Displaying all hunts</h1>

<p>
    <a asp-action="Create" style="padding-right: 3px">Create New Hunt</a> |
    <a asp-controller="locations" asp-action="Index" style="padding-right: 3px">Manage All Tasks</a> |
    <a asp-controller="User" asp-action="Manage" style="padding-left: 3px">Back to Admin Portal</a>
</p>
    <button type="button" class="clear-filters-btn" onclick="clearFilters()">Clear Filters</button>
<p>
</p>
<table id="hunt-table" class="table">
    <thead>
        <tr>
@*            <th>
                @Html.DisplayNameFor(model => model.Id)
            </th>*@
            <th>
                @Html.DisplayNameFor(model => model.CreationDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.HuntName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StartDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.EndDate)
            </th>
            <th>
                <p>Time Remaining</p>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.HuntStatus)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Players)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.HuntLocations)
            </th>
            
            
            <th>
                <select class="table-filter" id="hunt-status" onchange="filterRows()">
                    <option value="">Show all</option>
                    <option value="Active">Active</option>
                    <option value="Pending">Pending</option>
                    <option value="Ended">Ended</option>
                </select>
            </th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
@*            <td>
                @Html.DisplayFor(modelItem => item.Id)
            </td>  *@   
            <td>
                @Html.DisplayFor(modelItem => item.CreationDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.HuntName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StartDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.EndDate)
            </td>

            <td>
                <div class="timer" data-start="@item.StartDate.ToString("")" data-end="@item.EndDate.ToString("")"></div>
                <script>
                    // Get all elements with class "timer"
                    var timerElements = document.getElementsByClassName("timer");

                    // Loop through each timer element
                    Array.from(timerElements).forEach(function (element) 
                    {
                        // Get the EndDate from the data attribute
                        var endDate = new Date(element.dataset.end);

                        // Update the timer every second for each element
                        var timerInterval = setInterval(function () 
                        {
                            // Get the current date and time
                            var currentDate = new Date();

                            // Calculate the time difference in seconds
                            var timeDifference = Math.floor((endDate - currentDate) / 1000);

                            if (timeDifference > 0) 
                            {
                                var hours = Math.floor(timeDifference / (60 * 60));
                                var minutes = Math.floor((timeDifference % (60 * 60)) / 60);
                                var seconds = timeDifference % 60;

                                // Display the timer in the current timer element
                                element.innerHTML = `${hours} hours, ${minutes} minutes, ${seconds} seconds`;
                            }
                            else
                            {
                                // Display "Timer expired!" when the timer reaches 0
                                element.innerHTML = "00:00:00";
                                // Clear the interval to stop updating the timer
                                clearInterval(timerInterval);
                            }  
                        }, 1000);
                    });
                </script>
            </td>

            <td>
            
                    @{
                        var huntStatus = "";

                        if (DateTime.Now < item.StartDate)
                        {
                            huntStatus = "Pending";
                            item.HuntStatus = huntStatus;
                        }
                        else if(DateTime.Now >= item.StartDate && DateTime.Now < item.EndDate)
                        {
                            huntStatus = "Active";
                            item.HuntStatus = huntStatus;
                        }
                        else
                        {
                            huntStatus = "Ended";
                            item.HuntStatus = huntStatus;
                        }
                    }

                    @Html.DisplayFor(modelItem => huntStatus)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Players.Count)
             </td>
            <td>
                @Html.DisplayFor(modelItem => item.HuntLocations.Count)
            </td>
            <td>
                        @{
                        var timeRemaining2 = (item.EndDate - DateTime.Now).ToString();
                        if (TimeSpan.Parse(timeRemaining2).Seconds > 0)
                        {
                            <p>
                                @Html.ActionLink("Edit", "Update", new { id = item.Id }) |
                                @Html.ActionLink("View Hunt", "ViewTasks", new { id = item.Id }) |
                                @Html.ActionLink("Delete Hunt", "Delete", new { id = item.Id })
                            </p>
                        }
                        else
                        {
                            <p>
                                @Html.ActionLink("View Hunt", "ViewTasks", new { id = item.Id }) |
                                @Html.ActionLink("Delete Hunt", "Delete", new { id = item.Id })
                            </p>
                        }
                        }
            </td>
        </tr>
}
    </tbody>
</table>